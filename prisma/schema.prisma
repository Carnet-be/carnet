// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(cuid())

  username         String
  email            String           @unique
  nom_entreprise   String?
  type             UserType
  tel              String?
  password         String
  isActive         Boolean          @default(true)
  emailVerified    Boolean          @default(false)
  lang             Language         @default(fr)
  currency         Currency         @default(EUR)
  subscriptionType SubscriptionType @default(free)

  favoris_auctions Auction[] @relation(name: "favorite")

  zipCode  String?
  country  String?
  city     String?
  address  String?
  //
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  logsAuctions LogAuction[]

  // relation
  image    AssetImage?
  auctions Auction[]
  bids     Bid[]
  tokens   Token[]

  internalMessages InternalMessage[] @relation("auctioner")
  Blog             Blog[]
  Address          Address?          @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addressId        String?
  ListString       ListString[]

  @@index([addressId])
}

model DemandeStaff {
  id       String   @id @default(cuid())
  username String
  email    String   @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Auction {
  id         String   @id
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  // field
  name       String
  brand      String
  model      String
  build_year Int?
  fuel       FuelType

  starting_price                 Float?
  commission                     Float?
  starting_price_with_commission Float?

  isClosed       Boolean         @default(false)
  closedAt       DateTime?
  description    String?
  duration       DurationType
  end_date       DateTime?
  pause_date     DateTime?
  expected_price Float
  color          String?
  state          AuctionState    @default(pending)
  // relation
  specs          AuctionSpecs?
  options        AuctionOptions?
  rating         AuctionRating?
  address        Address?
  bids           Bid[]
  images         AssetImage[]

  logs            LogAuction[]
  favorite_by     User[]       @relation(name: "favorite")
  auctionnaire_id String
  auctionnaire    User         @relation(fields: [auctionnaire_id], references: [id])

  @@index([auctionnaire_id])
}

model AuctionSpecs {
  id           String  @id @default(cuid())
  carrosserie  Int?
  transmission Int?
  doors        Int?
  cv           String?
  cc           String?
  co2          String?
  kilometrage  String?
  version      String?
  ///
  auction_id   String  @unique
  auction      Auction @relation(fields: [auction_id], references: [id])
}

model AuctionOptions {
  id                          String  @id @default(cuid())
  airco                       Boolean @default(false)
  electric_windows            Boolean @default(false)
  climate_control             Boolean @default(false)
  panoramic_roof_or_open_roof Boolean @default(false)
  central_locking             Boolean @default(false)
  xenon_lighting              Boolean @default(false)
  light_alloy_wheels          Boolean @default(false)
  four_by_four                Boolean @default(false)
  power_steering              Boolean @default(false)
  cruise_control              Boolean @default(false)
  radio_cd                    Boolean @default(false)
  parking_sensors             Boolean @default(false)
  on_board_computer           Boolean @default(false)
  parking_camera              Boolean @default(false)
  start_stop                  Boolean @default(false)
  electric_mirrors            Boolean @default(false)
  abs                         Boolean @default(false)
  tow_hook                    Boolean @default(false)
  dead_angle_detection        Boolean @default(false)
  ///
  auction_id                  String  @unique
  auction                     Auction @relation(fields: [auction_id], references: [id])
}

model AuctionRating {
  id         String  @id @default(cuid())
  handling   Int?
  tires      Int?
  exterior   Int?
  interior   Int?
  ///
  auction_id String  @unique
  auction    Auction @relation(fields: [auction_id], references: [id])
}

model Address {
  id       String   @id @default(cuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  // field
  zipCode    String?
  country    String?
  city       String?
  address    String?
  lat        Float
  lon        Float
  //
  auction_id String  @unique
  auction    Auction @relation(fields: [auction_id], references: [id])
  User       User[]
}

model Bid {
  id       String   @id
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  //
  montant  Float
  numero   Int      @default(1)

  winner     Boolean @default(false)
  ///
  bidder_id  String
  bidder     User    @relation(fields: [bidder_id], references: [id])
  auction_id String
  auction    Auction @relation(fields: [auction_id], references: [id])

  @@index([auction_id])
  @@index([bidder_id])
}

model AssetImage {
  name       String
  fileKey    String   @id
  url        String
  //
  auction_id String?
  auction    Auction? @relation(fields: [auction_id], references: [id])

  user_id String? @unique
  user    User?   @relation(fields: [user_id], references: [id])
  Blog    Blog[]

  @@index([auction_id])
}

model Brand {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  country     String?
  description String? @db.Text()
  //
  models      Model[]
}

model Model {
  id          Int     @id @default(autoincrement())
  name        String
  year        Int?
  description String? @db.Text()
  brand_id    Int
  brand       Brand   @relation(fields: [brand_id], references: [id])

  @@unique([name, year, brand_id])
  @@index([brand_id])
}

model InternalMessage {
  id            String   @id @default(cuid())
  createAt      DateTime @default(now())
  updateAt      DateTime @updatedAt
  // field
  content       String   @db.Text()
  isRead        Boolean  @default(false)
  isReadByAdmin Boolean  @default(false)

  type      IntermalMessageType @default(client)
  // relation
  client_id String
  client    User                @relation("auctioner", fields: [client_id], references: [id])

  @@index([client_id])
}

model AppSettings {
  id                      String   @id @default("appSettings")
  createAt                DateTime @default(now())
  updateAt                DateTime @updatedAt
  // field
  contactEmail            String?
  contactPhone            String?
  contactAddress          String?
  ////
  confirmNewBidderAccount Boolean  @default(true)
}

model LogAuction {
  id         String   @id @default(cuid())
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  // field
  action     String
  // relation
  auction_id String
  auction    Auction  @relation(fields: [auction_id], references: [id])
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([auction_id])
}

model Blog {
  id                Int        @id @default(autoincrement())
  createAt          DateTime   @default(now())
  updateAt          DateTime   @updatedAt
  // field
  title             String
  locale            Language?
  image             AssetImage @relation(fields: [assetImageFileKey], references: [fileKey])
  content           String     @db.Text()
  // relation
  author_id         String
  author            User       @relation(fields: [author_id], references: [id])
  assetImageFileKey String

  @@index([author_id])
  @@index([assetImageFileKey])
}

model Token {
  id       String    @id @default(cuid())
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  // field
  value    String?
  type     TokenType
  expireAt DateTime
  // relation
  user_id  String
  user     User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model ListString {
  id       String   @id @default(cuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  // field
  value    String
  // relation
  user_id  String
  user     User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

//////ENUM///////
enum TokenType {
  PASSWORD_FORGET
}

enum UserType {
  BID
  AUC
  ADMIN
  STAFF
}

enum FuelType {
  Gasoline
  Diesel
  Electricity
  Hybrid
}

enum DurationType {
  ThreeDays
  OneWeek
  TwoWeek
}

enum AuctionState {
  published
  pending
  pause
  confirmation
  completed
}

enum IntermalMessageType {
  client
  admin
}

enum Language {
  fr
  en
  ar
  de
  es
  it
  nl
  pt
  ru
  zh
  ja
  ko
}

enum SubscriptionType {
  free
  premium
  //
  freeTrial
  //
}

enum Currency {
  EUR
  USD
  GBP
  MAD
}
